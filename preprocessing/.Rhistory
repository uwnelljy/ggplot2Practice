ggplot(data=nhanes) +
#
geom_bar(mapping=aes(x=race_ethc, color=gender))
ggplot(data=nhanes) +
# Use fill= option to show count of different gender in each race.
geom_bar(mapping=aes(x=race_ethc, fill=gender))
# Bar plot of different race.
ggplot(data=nhanes) +
# y is the count of each race,
# and group by gender showing in different color margin.
geom_bar(mapping=aes(x=race_ethc, color=gender))
ggplot(data=nhanes) +
# Use fill= option to show count of different gender in each race.
geom_bar(mapping=aes(x=race_ethc, fill=gender))
nhanes %>%
group_by(race_ethc) %>%
summarize(average_BMXBMI = mean(BMXBMI, na.rm = TRUE)) %>%
ggplot() +
geom_col(mapping=aes(x=race_ethc, y=average_BMXBMI))
nhanes %>%
group_by(race_ethc) %>%
summarize(average_BMXBMI = mean(BMXBMI, na.rm = TRUE))
nhanes %>%
group_by(race_ethc) %>%
summarize(average_BMXBMI = mean(BMXBMI, na.rm = TRUE)) %>%
ggplot() +
geom_col(mapping=aes(x=race_ethc, y=average_BMXBMI))
nhanes
nhanes %>%
group_by(race_ethc)
nhanes %>%
group_by(race_ethc) %>%
summarize_each(average_BMXBMI = mean(BMXBMI, na.rm = TRUE)) %>%
ggplot() +
geom_col(mapping=aes(x=race_ethc, y=average_BMXBMI))
nhanes %>%
group_by(race_ethc) %>%
summarize_each(average_BMXBMI = mean(BMXBMI, na.rm = TRUE))
nhanes %>%
group_by(race_ethc) %>%
summarize(average_BMXBMI = mean(BMXBMI, na.rm = TRUE))
group_by(nhanes, race_ethc)
a <- group_by(nhanes, race_ethc)
a$race_ethc
tapply(nhanes$BMXBMI, nhanes$race_ethc, mean)
tapply(nhanes$BMXBMI, nhanes$race_ethc, mean(na.rm = T))
tapply(nhanes$BMXBMI, nhanes$race_ethc, mean, na.rm = T)
nhanes %>%
group_by(race_ethc) %>%
summarize(average_BMXBMI = mean(BMXBMI, na.rm = TRUE)) %>%
ggplot() +
geom_col(mapping=aes(x=race_ethc, y=average_BMXBMI))
nhanes %>%
group_by(race_ethc) %>%
summarize(average_BMXBMI = mean(BMXBMI, na.rm = TRUE))
n
tapply(nhanes$BMXBMI, nhanes$race_ethc, mean, na.rm = T)
ggplot(data=nhanes) +
geom_bar(mapping=aes(x=race_ethc, color=gender))
ggplot(data=nhanes) +
geom_bar(mapping=aes(x=race_ethc, fill=gender))
nhanes %>%
group_by(race_ethc) %>%
summarize(average_BMXBMI = mean(BMXBMI, na.rm = TRUE)) %>%
ggplot() +
geom_col(mapping=aes(x=race_ethc, y=average_BMXBMI))
library(ggplot2)
library(tidyverse)
data <- read.csv('~/Documents/UW/514 biostat 1/data/nhaneslarge.csv')
summary(data)
nhanes <- data %>%
mutate(BPXDI1=as.numeric(BPXDI1), BPXDI2=as.numeric(BPXDI2),
race_ethc=as.factor(race_ethc), gender=as.factor(gender),
BMXBMI=as.numeric(BMXBMI))
summary(nhanes)
ggplot(data=nhanes) +
geom_point(mapping = aes(x=BMXBMI, y=DR1TFOLA, shape=gender))
ggplot(data=nhanes) +
geom_point(mapping = aes(x=BMXBMI, y=DR1TFOLA, color=gender))
ggplot(data=nhanes) +
geom_point(mapping = aes(x=BMXBMI, y=DR1TFOLA, color=gender,
size=race_ethc))
ggplot(data=nhanes) +
geom_point(mapping = aes(x=BMXBMI, y=DR1TFOLA, color=gender,
size=race_ethc), alpha=1/2)
ggplot(data=nhanes) +
geom_line(mapping = aes(x=BMXBMI, y=DR1TFOLA, color=gender)) +
geom_point(mapping = aes(x=BMXBMI, y=DR1TFOLA, color=gender))
ggplot(data=nhanes, mapping=aes(x=BMXBMI, y=DR1TFOLA, color=gender)) +
geom_line() +
geom_point()
ggplot(data=nhanes, mapping=aes(x=BMXBMI, y=DR1TFOLA, color=gender)) +
geom_smooth(se=FALSE) +
geom_point(alpha=1/10)
ggplot(data=nhanes) +
geom_bar(mapping=aes(x=race_ethc, color=gender))
ggplot(data=nhanes) +
geom_bar(mapping=aes(x=race_ethc, fill=gender))
nhanes %>%
group_by(race_ethc) %>%
summarize(average_BMXBMI = mean(BMXBMI, na.rm = TRUE)) %>%
ggplot() +
geom_col(mapping=aes(x=race_ethc, y=average_BMXBMI))
tapply(nhanes$BMXBMI, nhanes$race_ethc, mean, na.rm = T)
nhanes %>%
tapply(BMXBMI, race_ethc, mean, na.rm = T)
library(ggplot2)
library(tidyverse)
nhanes %>%
group_by(race_ethc) %>%
summarize(average_BMXBMI = mean(BMXBMI, na.rm = TRUE)) %>%
ggplot() +
geom_col(mapping=aes(x=race_ethc, y=average_BMXBMI))
nhanes %>%
group_by(race_ethc) %>%
summarise(average_BMXBMI = mean(BMXBMI, na.rm = TRUE))
nhanes %>%
group_by(race_ethc) %>%
summarise(average_BMXBMI = mean(BMXBMI, na.rm = TRUE))
nhanes <- read.csv('nhanes_processed.csv')
setwd("~/Documents/gitfile/ggplot2practice/preprocessing")
# Read data into environment.
nhanes <- read.csv('nhanes_processed.csv')
nhanes %>%
group_by(race_ethc) %>%
summarise(average_BMXBMI = mean(BMXBMI, na.rm = TRUE)) %>%
ggplot() +
geom_col(mapping=aes(x=race_ethc, y=average_BMXBMI))
nhanes %>%
group_by(race_ethc) %>%
summarise(average_BMXBMI = mean(BMXBMI, na.rm = TRUE))
nhanes %>%
group_by(race_ethc) %>%
summarise(average_BMXBMI = mean(BMXBMI, na.rm = TRUE)) %>%
ggplot() +
geom_col(mapping=aes(x=race_ethc, y=average_BMXBMI))
library(dplyr)
ggplot(data=nhanes) +
geom_line(mapping = aes(x=BMXBMI, y=DR1TFOLA, color=gender)) +
geom_point(mapping = aes(x=BMXBMI, y=DR1TFOLA, color=gender))
ggplot(data=nhanes, mapping=aes(x=BMXBMI, y=DR1TFOLA, color=gender)) +
geom_line() +
geom_point()
ggplot(data=nhanes, mapping=aes(x=BMXBMI, y=DR1TFOLA, color=gender)) +
geom_smooth(se=FALSE) +
geom_point(alpha=1/10)
ggplot(data=nhanes) +
geom_bar(mapping=aes(x=race_ethc, color=gender))
ggplot(data=nhanes) +
geom_bar(mapping=aes(x=race_ethc, fill=gender))
nhanes %>%
group_by(race_ethc) %>%
summarize(average_BMXBMI = mean(BMXBMI, na.rm = TRUE)) %>%
ggplot() +
geom_col(mapping=aes(x=race_ethc, y=average_BMXBMI))
library(dplyr)
ggplot(data=nhanes) +
geom_bar(mapping=aes(x=race_ethc, color=gender))
ggplot(data=nhanes) +
geom_bar(mapping=aes(x=race_ethc, fill=gender))
nhanes %>%
group_by(race_ethc) %>%
summarize(average_BMXBMI = mean(BMXBMI, na.rm = TRUE)) %>%
ggplot() +
geom_col(mapping=aes(x=race_ethc, y=average_BMXBMI))
nhanes %>%
group_by(race_ethc) %>%
summarise(average_BMXBMI = mean(BMXBMI, na.rm = TRUE))
nhanes
summary(nhanes)
library(tidyverse)
data <- read.csv('nhaneslarge.csv')
# A basic summary about type, statistics and NAs.
summary(data)
# Convert character to numeric, convert categorical variable from character to factor.
nhanes <- data %>%
mutate(BPXDI1=as.numeric(BPXDI1), BPXDI2=as.numeric(BPXDI2),
race_ethc=as.factor(race_ethc), gender=as.factor(gender),
BMXBMI=as.numeric(BMXBMI))
summary(nhanes)
# Save processed file.
write.csv(nhanes, 'nhanes_processed.csv')
summary(nhanes)
summary(nhanes)
## ggplot2 -- Bar(y=count) and column plot
library(ggplot2)
library(tidyverse)
# Read data into environment.
nhanes <- read.csv('nhanes_processed.csv')
# Bar plot of different race.
ggplot(data=nhanes) +
# y is the count of each race,
# and group by gender showing in different color margin.
geom_bar(mapping=aes(x=race_ethc, color=gender))
ggplot(data=nhanes) +
# Use fill= option to show count of different gender in each race.
geom_bar(mapping=aes(x=race_ethc, fill=gender))
nhanes %>%
group_by(race_ethc) %>%
summarise(average_BMXBMI = mean(BMXBMI, na.rm = TRUE)) %>%
ggplot() +
geom_col(mapping=aes(x=race_ethc, y=average_BMXBMI))
summary(nhanes)
source('preprocessing.R')
setwd("~/Documents/gitfile/ggplot2practice/preprocessing")
source('preprocessing.R')
source(preprocessing.R)
source("preprocessing.R")
source("preprocessing.R")
getwd()
source("/Users/yaojiang/Documents/gitfile/ggplot2practice/preprocessing/preprocessing.R")
source("/Users/yaojiang/Documents/gitfile/ggplot2practice/preprocessing/preprocessing.R")
data <- read.csv('nhaneslarge_processed.csv')
source("preprocessing.R")
nhanes %>%
group_by(race_ethc) %>%
summarise(average_BMXBMI = mean(BMXBMI, na.rm = TRUE)) %>%
ggplot() +
geom_col(mapping=aes(x=race_ethc, y=average_BMXBMI))
nhanes <- data %>%
mutate(BPXDI1=as.numeric(BPXDI1), BPXDI2=as.numeric(BPXDI2),
race_ethc=as.factor(race_ethc), gender=as.factor(gender),
BMXBMI=as.numeric(BMXBMI))
summary(nhanes)
nhanes %>%
group_by(race_ethc) %>%
summarise(average_BMXBMI = mean(BMXBMI, na.rm = TRUE)) %>%
ggplot() +
geom_col(mapping=aes(x=race_ethc, y=average_BMXBMI))
# Convert character to numeric, convert categorical variable from character to factor.
nhanes <- data %>%
mutate(BPXDI1=as.numeric(BPXDI1), BPXDI2=as.numeric(BPXDI2),
race_ethc=as.factor(race_ethc), gender=as.factor(gender),
BMXBMI=as.numeric(BMXBMI))
summary(nhanes)
library(dplyr)
ggplot(data=nhanes) +
geom_bar(mapping=aes(x=race_ethc, color=gender))
ggplot(data=nhanes) +
geom_bar(mapping=aes(x=race_ethc, fill=gender))
nhanes %>%
group_by(race_ethc) %>%
summarize(average_BMXBMI = mean(BMXBMI, na.rm = TRUE)) %>%
ggplot() +
geom_col(mapping=aes(x=race_ethc, y=average_BMXBMI))
summary(nhanes)
nhanes %>%
group_by(race_ethc) %>%
summarise(average_BMXBMI = mean(BMXBMI, na.rm = TRUE))
tapply(nhanes$BMXBMI, nhanes$race_ethc, mean, na.rm = T)
a <- tapply(nhanes$BMXBMI, nhanes$race_ethc, mean, na.rm = T)
sammary(a)
summary(a)
class(a)
a[1]
a <- tipple(tapply(nhanes$BMXBMI, nhanes$race_ethc, mean, na.rm = T))
a <- tibble(tapply(nhanes$BMXBMI, nhanes$race_ethc, mean, na.rm = T))
a
mean_bmi
mean_bmi <- tapply(nhanes$BMXBMI, nhanes$race_ethc, mean, na.rm = T)
mean_bmi
mean_bmi[1]
class(mean_bmi[1])
names(mean_bmi)
class(names(mean_bmi))
names(mean_bmi)
names(mean_bmi)[1]
bmi <- tibble(name = names(mean_bmi), bmi = mean_bm)
bmi <- tibble(name = names(mean_bmi), bmi = mean_bmi)
bmi
mean_bmi <- tapply(nhanes$BMXBMI, nhanes$race_ethc, mean, na.rm = T)
tibble(race = names(mean_bmi), meanBMI = mean_bmi) %>%
ggplot() +
geom_col(mapping=aes(x=race, y=meanBMI))
# Calculate mean BMXBMI in each race_ethc group
mean_bmi <- tapply(nhanes$BMXBMI, by=nhanes$race_ethc, mean, na.rm = T)
# Calculate mean BMXBMI in each race_ethc group
mean_bmi <- tapply(nhanes$BMXBMI, nhanes$race_ethc, mean, na.rm = T)
ggplot(data=nhanes) +
geom_bar(mapping=aes(x=race_ethc, color=gender))
ggplot(data=nhanes) +
geom_bar(mapping=aes(x=race_ethc, fill=gender))
# Calculate mean BMXBMI in each race_ethc group
mean_bmi <- tapply(nhanes$BMXBMI, nhanes$race_ethc, mean, na.rm = T)
# Create tibble with race and corresponding mean BMXBMI
tibble(race = names(mean_bmi), meanBMI = mean_bmi) %>%
ggplot() +
# Column plot: y is mean BMXBMI and x is each race group
geom_col(mapping=aes(x=race, y=meanBMI))
ggplot(data=nhanes) +
geom_bar(mapping=aes(x=race_ethc, color=gender))
ggplot(data=nhanes) +
geom_bar(mapping=aes(x=race_ethc, fill=gender))
# Calculate mean BMXBMI in each race_ethc group
mean_bmi <- tapply(nhanes$BMXBMI, nhanes$race_ethc, mean, na.rm = T)
# Create tibble with race and corresponding mean BMXBMI
tibble(race = names(mean_bmi), meanBMI = mean_bmi) %>%
ggplot() +
# Column plot: y is mean BMXBMI and x is each race group
geom_col(mapping=aes(x=race, y=meanBMI))
min_compare <- round(apply(result_df, 2, mean), 4)
min_compare
min_compare <- round(apply(result_df, 2, mean), 4)
names(min_compare)
min_compare <- round(apply(result_df, 2, mean), 4)
tibble(method=names(min_compare), mce=min_compare)
min_compare <- round(apply(result_df, 2, mean), 4)
tibble(method=names(min_compare), mce=min_compare) %>%
ggplot() +
geom_col(mapping = aes(x=method, y=mce))
library(knitr)
knitr::opts_chunk$set(include = T)
### -----------------------------------------------------------
### Get data information.
print(tail(diabetes))
library(knitr)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
### -----------------------------------------------------------
### Get data information.
print(tail(diabetes))
print(colnames(diabetes))
# Check missing values
summary(diabetes)
### -----------------------------------------------------------
### Get data information.
print(tail(diabetes))
print(colnames(diabetes))
# Check missing values
summary(diabetes)
### -----------------------------------------------------------
### Set environment and import data.
setwd('~/Documents/R')
diabetes <- read.csv('diabetes_data_upload.csv')
### -----------------------------------------------------------
### Get data information.
print(tail(diabetes))
print(colnames(diabetes))
# Check missing values
summary(diabetes)
library(tidyverse)
diabetes_new <- diabetes %>%
mutate(Age = Age)
diabetes_new
with(data = diabetes, unique(Gender))
with(data = diabetes, unique('Gender'))
is.na(diabetes)
unique(is.na(diabetes))
unique(is.na(diabetes))
diabetes_new <- diabetes %>%
mutate(Gender = ifelse(Gender == 'Female', 0,
ifelse(Gender == 'Male', 1, NA)),
Class = ifelse(class == 'Positive', 1,
ifelse(class == 'Negative', 0, NA))
)
diabetes_new
### -----------------------------------------------------------
### Converting
library(tidyverse)
column_names <- colnames(diabetes)
diabetes_new <- diabetes %>%
mutate(Gender = ifelse(Gender == 'Female', 0,
ifelse(Gender == 'Male', 1, NA)),
Class = as.factor(ifelse(class == 'Positive', 1,
ifelse(class == 'Negative', 0, NA)))
)
for (name in column_names[3:16]){
diabetes_new[name] <- ifelse(diabetes[name] == 'Yes', 1, 0)
}
print(summary(diabetes_new))
### -----------------------------------------------------------
### Converting
library(tidyverse)
column_names <- colnames(diabetes)
diabetes_new <- diabetes %>%
mutate(Gender = ifelse(Gender == 'Female', 0,
ifelse(Gender == 'Male', 1, NA)),
class = as.factor(ifelse(class == 'Positive', 1,
ifelse(class == 'Negative', 0, NA)))
)
for (name in column_names[3:16]){
diabetes_new[name] <- ifelse(diabetes[name] == 'Yes', 1, 0)
}
print(summary(diabetes_new))
### -----------------------------------------------------------
### Converting
library(tidyverse)
# Get feature names
column_names <- colnames(diabetes)
# Create a new dataset with desired variable type
diabetes_new <- diabetes %>%
# Convert character variables (except for class) into numeric
# Convert class (outcome) into factor
mutate(Gender = ifelse(Gender == 'Female', 0,
ifelse(Gender == 'Male', 1, NA)),
class = as.factor(ifelse(class == 'Positive', 1,
ifelse(class == 'Negative', 0, NA)))
)
# Convert character variables (except for class) into numeric
for (name in column_names[3:16]){
diabetes_new[name] <- ifelse(diabetes[name] == 'Yes', 1, 0)
}
print(round(summary(diabetes_new), 2)
### -----------------------------------------------------------
### Converting
library(tidyverse)
# Get feature names
column_names <- colnames(diabetes)
# Create a new dataset with desired variable type
diabetes_new <- diabetes %>%
# Convert character variables (except for class) into numeric
# Convert class (outcome) into factor
mutate(Gender = ifelse(Gender == 'Female', 0,
ifelse(Gender == 'Male', 1, NA)),
class = as.factor(ifelse(class == 'Positive', 1,
ifelse(class == 'Negative', 0, NA)))
)
# Convert character variables (except for class) into numeric
for (name in column_names[3:16]){
diabetes_new[name] <- ifelse(diabetes[name] == 'Yes', 1, 0)
}
print(round(summary(diabetes_new), 2))
### -----------------------------------------------------------
### Converting
library(tidyverse)
# Get feature names
column_names <- colnames(diabetes)
# Create a new dataset with desired variable type
diabetes_new <- diabetes %>%
# Convert character variables (except for class) into numeric
# Convert class (outcome) into factor
mutate(Gender = ifelse(Gender == 'Female', 0,
ifelse(Gender == 'Male', 1, NA)),
class = as.factor(ifelse(class == 'Positive', 1,
ifelse(class == 'Negative', 0, NA)))
)
# Convert character variables (except for class) into numeric
for (name in column_names[3:16]){
diabetes_new[name] <- ifelse(diabetes[name] == 'Yes', 1, 0)
}
print(summary(diabetes_new))
### -----------------------------------------------------------
### Correlating
cat('gender vs. class:', '\n')
addmargins(table(diabetes$Gender,diabetes$class))
cat('polyuria vs. class:', '\n')
addmargins(table(diabetes$Polyuria,diabetes$class))
cat('polydipsia vs. class:', '\n')
addmargins(table(diabetes$Polydipsia,diabetes$class))
cat('sudden.weight.loss vs. class:', '\n')
addmargins(table(diabetes$sudden.weight.loss,diabetes$class))
cat('weakness vs. class:', '\n')
addmargins(table(diabetes$weakness,diabetes$class))
cat('polyphagia vs. class:', '\n')
addmargins(table(diabetes$Polyphagia,diabetes$class))
cat('genital.thrush vs. class:', '\n')
addmargins(table(diabetes$Genital.thrush,diabetes$class))
cat('visual.blurring vs. class:', '\n')
addmargins(table(diabetes$visual.blurring,diabetes$class))
cat('Itching vs. class:', '\n')
addmargins(table(diabetes$Itching,diabetes$class))
cat('Irritability vs. class:', '\n')
addmargins(table(diabetes$Irritability,diabetes$class))
cat('delayed.healing vs. class:', '\n')
addmargins(table(diabetes$delayed.healing,diabetes$class))
cat('partial.paresis vs. class:', '\n')
addmargins(table(diabetes$partial.paresis,diabetes$class))
cat('muscle.stiffness vs. class:', '\n')
addmargins(table(diabetes$muscle.stiffness,diabetes$class))
cat('alopecia vs. class:', '\n')
addmargins(table(diabetes$Alopecia,diabetes$class))
cat('obesity vs. class:', '\n')
addmargins(table(diabetes$Obesity,diabetes$class))
cat('polyuria vs. class:', '\n')
addmargins(table(diabetes$Polyuria,diabetes$class))
addmargins(table(diabetes$Polyuria,diabetes$class))
cor_polyuria <- tibble(addmargins(table(diabetes$Polyuria,diabetes$class)))
cor_polyuria <- tibble(addmargins(table(diabetes$Polyuria,diabetes$class)))
knitr::kable(cor_polyuria)
cor_polyuria
cor_polyuria <- data.frame(tibble(addmargins(table(diabetes$Polyuria,diabetes$class))))
knitr::kable(cor_polyuria)
cor_polyuria
tibble(addmargins(table(diabetes$Polyuria,diabetes$class)))
cor_polyuria <-addmargins(table(diabetes$Polyuria,diabetes$class))
addmargins(table(diabetes$Polyuria,diabetes$class))
cor_polyuria
cor_polyuria <-addmargins(table(diabetes$Polyuria,diabetes$class))
knitr::kable(cor_polyuria)
### -----------------------------------------------------------
### Age and class
library(plyr)
ddply(diabetes, .(class), function(sub){data.frame(
Age.min = min(sub$Age),
Age.25 = quantile(sub$Age, 0.25),
Age.mean = mean(sub$Age),
Age.median = median(sub$Age),
Age.75 = quantile(sub$Age, 0.75),
Age.max = max(sub$Age))
})
### -----------------------------------------------------------
### Age and class
library(plyr)
age_class <- ddply(diabetes, .(class), function(sub){data.frame(
Age.min = min(sub$Age),
Age.25 = quantile(sub$Age, 0.25),
Age.mean = mean(sub$Age),
Age.median = median(sub$Age),
Age.75 = quantile(sub$Age, 0.75),
Age.max = max(sub$Age))
})
knitr::kable(age_class)
